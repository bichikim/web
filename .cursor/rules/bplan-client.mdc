---
description: 
globs: 
alwaysApply: true
---
# BPlan Client Application Guidelines

## Project Overview
BPlan Client is a Solid Start SSR application that follows a specific structure and conventions.

## Directory Structure
```
/
├── src/                  # Source code
│   ├── components/       # Reusable UI components
│   ├── env/              # Environment configuration
│   ├── middleware/       # Request/response middleware
│   ├── routes/           # File-based routing
│   ├── server/           # Server-side code
│   ├── use/              # Custom hooks and composables
│   ├── utils/            # Utility functions
│   ├── types/            # TypeScript type definitions
│   ├── env/              # Environment configuration
│   ├── App.tsx           # Root application component
│   ├── entry-client.tsx  # Client-side entry point
│   └── entry-server.tsx  # Server-side entry point
├── public/               # Static assets
└── .env                  # Environment variables
```

## Coding Standards

### Component Structure
- Components should be placed in `src/components/`
- Each component should have its own directory with the following structure:
```
component-name/
├── index.tsx           # Main component file
├── types.ts           # Component types and interfaces
└── use-component.ts   # Component-specific hooks (if needed)
```

### API Structure
- API endpoints should be placed in `src/api/`
- Follow RESTful conventions
- Use TypeScript interfaces for request/response types

### Routing
- Routes are file-based in `src/routes/`
- Use dynamic routes when needed
- Implement proper error boundaries

### State Management
- Prefer Solid.js signals for local state
- Use stores for global state management
- Keep state as close to where it's used as possible

### Type Safety
- Use TypeScript strictly
- Define interfaces for all data structures
- Avoid `any` type usage
- Use proper type imports/exports

### Performance Guidelines
- Implement proper code splitting
- Use lazy loading for routes
- Optimize images and assets
- Implement proper caching strategies

### Environment Configuration
- Use `.env` for environment variables
- Follow the `.env.example` template
- Document all environment variables

### Error Handling
- Implement proper error boundaries
- Use consistent error handling patterns
- Log errors appropriately

### Testing
- Write unit tests for components
- Write integration tests for API endpoints
- Implement E2E tests for critical flows

### Build and Deployment
- Use `pnpm` for package management
- Follow semantic versioning
- Document deployment procedures

## Best Practices
1. Follow functional programming principles
2. Keep components small and focused
3. Use proper TypeScript types
4. Implement proper error handling
5. Follow performance optimization guidelines
6. Write comprehensive tests
7. Document code properly
8. Follow consistent naming conventions
9. Implement proper security measures
10. Keep dependencies up to date

## Security Guidelines
1. Implement proper authentication
2. Use HTTPS
3. Sanitize user inputs
4. Implement proper CORS policies
5. Follow security best practices

## Documentation
- Document all components
- Document API endpoints
- Keep README up to date
- Document environment setup
- Document deployment procedures
