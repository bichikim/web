# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateComment {
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
}

type AggregatePost {
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
}

type AggregateTag {
  _count: TagCountAggregate
  _max: TagMaxAggregate
  _min: TagMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

"""user and auth token"""
type AuthUser {
  _count: UserCount
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  email: String!
  followerIDs: [String!]!
  followers(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  following(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  followingIDs: [String!]!
  id: String!
  likePostIDs: [String!]!
  likePosts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  name: String
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!

  """jwt token"""
  token: String!
}

type Comment {
  author: User!
  authorId: String!
  id: String!
  message: String!
  port: Post!
  postId: String!
}

type CommentCountAggregate {
  _all: Int!
  authorId: Int!
  id: Int!
  message: Int!
  postId: Int!
}

input CommentCountOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
  message: SortOrder
  postId: SortOrder
}

input CommentCreateInput {
  author: UserCreateNestedOneWithoutCommentsInput!
  id: String
  message: String!
  port: PostCreateNestedOneWithoutCommentsInput!
}

input CommentCreateManyAuthorInput {
  id: String
  message: String!
  postId: String!
}

input CommentCreateManyAuthorInputEnvelope {
  data: [CommentCreateManyAuthorInput!]!
}

input CommentCreateManyInput {
  authorId: String!
  id: String
  message: String!
  postId: String!
}

input CommentCreateManyPortInput {
  authorId: String!
  id: String
  message: String!
}

input CommentCreateManyPortInputEnvelope {
  data: [CommentCreateManyPortInput!]!
}

input CommentCreateNestedManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
  createMany: CommentCreateManyAuthorInputEnvelope
}

input CommentCreateNestedManyWithoutPortInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPortInput!]
  create: [CommentCreateWithoutPortInput!]
  createMany: CommentCreateManyPortInputEnvelope
}

input CommentCreateOrConnectWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutPortInput {
  create: CommentCreateWithoutPortInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutAuthorInput {
  id: String
  message: String!
  port: PostCreateNestedOneWithoutCommentsInput!
}

input CommentCreateWithoutPortInput {
  author: UserCreateNestedOneWithoutCommentsInput!
  id: String
  message: String!
}

type CommentGroupBy {
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
  authorId: String!
  id: String!
  message: String!
  postId: String!
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

type CommentMaxAggregate {
  authorId: String
  id: String
  message: String
  postId: String
}

input CommentMaxOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
  message: SortOrder
  postId: SortOrder
}

type CommentMinAggregate {
  authorId: String
  id: String
  message: String
  postId: String
}

input CommentMinOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
  message: SortOrder
  postId: SortOrder
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentOrderByWithAggregationInput {
  _count: CommentCountOrderByAggregateInput
  _max: CommentMaxOrderByAggregateInput
  _min: CommentMinOrderByAggregateInput
  authorId: SortOrder
  id: SortOrder
  message: SortOrder
  postId: SortOrder
}

input CommentOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  id: SortOrder
  message: SortOrder
  port: PostOrderByWithRelationInput
  postId: SortOrder
}

enum CommentScalarFieldEnum {
  authorId
  id
  message
  postId
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  authorId: StringFilter
  id: StringFilter
  message: StringFilter
  postId: StringFilter
}

input CommentScalarWhereWithAggregatesInput {
  AND: [CommentScalarWhereWithAggregatesInput!]
  NOT: [CommentScalarWhereWithAggregatesInput!]
  OR: [CommentScalarWhereWithAggregatesInput!]
  authorId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  message: StringWithAggregatesFilter
  postId: StringWithAggregatesFilter
}

input CommentUpdateInput {
  author: UserUpdateOneRequiredWithoutCommentsNestedInput
  message: StringFieldUpdateOperationsInput
  port: PostUpdateOneRequiredWithoutCommentsNestedInput
}

input CommentUpdateManyMutationInput {
  message: StringFieldUpdateOperationsInput
}

input CommentUpdateManyWithWhereWithoutAuthorInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutPortInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutAuthorNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
  createMany: CommentCreateManyAuthorInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutPortNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPortInput!]
  create: [CommentCreateWithoutPortInput!]
  createMany: CommentCreateManyPortInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPortInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutPortInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPortInput!]
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: CommentUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutPortInput {
  data: CommentUpdateWithoutPortInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutAuthorInput {
  message: StringFieldUpdateOperationsInput
  port: PostUpdateOneRequiredWithoutCommentsNestedInput
}

input CommentUpdateWithoutPortInput {
  author: UserUpdateOneRequiredWithoutCommentsNestedInput
  message: StringFieldUpdateOperationsInput
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  update: CommentUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutPortInput {
  create: CommentCreateWithoutPortInput!
  update: CommentUpdateWithoutPortInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  author: UserRelationFilter
  authorId: StringFilter
  id: StringFilter
  message: StringFilter
  port: PostRelationFilter
  postId: StringFilter
}

input CommentWhereUniqueInput {
  id: String
}

type Mutation {
  createManyComment(data: [CommentCreateManyInput!]!): AffectedRowsOutput!
  createManyPost(data: [PostCreateManyInput!]!): AffectedRowsOutput!
  createManyTag(data: [TagCreateManyInput!]!): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!): AffectedRowsOutput!
  createOneComment(data: CommentCreateInput!): Comment!
  createOnePost(data: PostCreateInput!): Post!
  createOneTag(data: TagCreateInput!): Tag!
  createOneUser(data: UserCreateInput!): User!
  deleteManyComment(where: CommentWhereInput): AffectedRowsOutput!
  deleteManyPost(where: PostWhereInput): AffectedRowsOutput!
  deleteManyTag(where: TagWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneTag(where: TagWhereUniqueInput!): Tag
  deleteOneUser(where: UserWhereUniqueInput!): User
  signIn(data: SignInInput!): AuthUser
  signUp(data: SignUpInput!): AuthUser
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): AffectedRowsOutput!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput!
  updateManyTag(data: TagUpdateManyMutationInput!, where: TagWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOneTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateTest(name: String!): Test!
  upsertOneComment(create: CommentCreateInput!, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertOnePost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertOneTag(create: TagCreateInput!, update: TagUpdateInput!, where: TagWhereUniqueInput!): Tag!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
  unset: Boolean
}

type Post {
  _count: PostCount
  author: User!
  authorId: String!
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  id: String!
  likeIDs: [String!]!
  likes(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  message: String
  tagIDs: [String!]!
  tags(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
  title: String!
}

type PostCount {
  comments: Int!
  likes: Int!
  tags: Int!
}

type PostCountAggregate {
  _all: Int!
  authorId: Int!
  id: Int!
  likeIDs: Int!
  message: Int!
  tagIDs: Int!
  title: Int!
}

input PostCountOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
  likeIDs: SortOrder
  message: SortOrder
  tagIDs: SortOrder
  title: SortOrder
}

input PostCreateInput {
  author: UserCreateNestedOneWithoutPostsInput!
  comments: CommentCreateNestedManyWithoutPortInput
  id: String
  likeIDs: PostCreatelikeIDsInput
  likes: UserCreateNestedManyWithoutLikePostsInput
  message: String
  tagIDs: PostCreatetagIDsInput
  tags: TagCreateNestedManyWithoutPostsInput
  title: String!
}

input PostCreateManyAuthorInput {
  id: String
  likeIDs: PostCreatelikeIDsInput
  message: String
  tagIDs: PostCreatetagIDsInput
  title: String!
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
}

input PostCreateManyInput {
  authorId: String!
  id: String
  likeIDs: PostCreatelikeIDsInput
  message: String
  tagIDs: PostCreatetagIDsInput
  title: String!
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateNestedManyWithoutLikesInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutLikesInput!]
  create: [PostCreateWithoutLikesInput!]
}

input PostCreateNestedManyWithoutTagsInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutTagsInput!]
  create: [PostCreateWithoutTagsInput!]
}

input PostCreateNestedOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutLikesInput {
  create: PostCreateWithoutLikesInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutTagsInput {
  create: PostCreateWithoutTagsInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  comments: CommentCreateNestedManyWithoutPortInput
  id: String
  likeIDs: PostCreatelikeIDsInput
  likes: UserCreateNestedManyWithoutLikePostsInput
  message: String
  tagIDs: PostCreatetagIDsInput
  tags: TagCreateNestedManyWithoutPostsInput
  title: String!
}

input PostCreateWithoutCommentsInput {
  author: UserCreateNestedOneWithoutPostsInput!
  id: String
  likeIDs: PostCreatelikeIDsInput
  likes: UserCreateNestedManyWithoutLikePostsInput
  message: String
  tagIDs: PostCreatetagIDsInput
  tags: TagCreateNestedManyWithoutPostsInput
  title: String!
}

input PostCreateWithoutLikesInput {
  author: UserCreateNestedOneWithoutPostsInput!
  comments: CommentCreateNestedManyWithoutPortInput
  id: String
  likeIDs: PostCreatelikeIDsInput
  message: String
  tagIDs: PostCreatetagIDsInput
  tags: TagCreateNestedManyWithoutPostsInput
  title: String!
}

input PostCreateWithoutTagsInput {
  author: UserCreateNestedOneWithoutPostsInput!
  comments: CommentCreateNestedManyWithoutPortInput
  id: String
  likeIDs: PostCreatelikeIDsInput
  likes: UserCreateNestedManyWithoutLikePostsInput
  message: String
  tagIDs: PostCreatetagIDsInput
  title: String!
}

input PostCreatelikeIDsInput {
  set: [String!]!
}

input PostCreatetagIDsInput {
  set: [String!]!
}

type PostGroupBy {
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
  authorId: String!
  id: String!
  likeIDs: [String!]
  message: String
  tagIDs: [String!]
  title: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostMaxAggregate {
  authorId: String
  id: String
  message: String
  title: String
}

input PostMaxOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
  message: SortOrder
  title: SortOrder
}

type PostMinAggregate {
  authorId: String
  id: String
  message: String
  title: String
}

input PostMinOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
  message: SortOrder
  title: SortOrder
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithAggregationInput {
  _count: PostCountOrderByAggregateInput
  _max: PostMaxOrderByAggregateInput
  _min: PostMinOrderByAggregateInput
  authorId: SortOrder
  id: SortOrder
  likeIDs: SortOrder
  message: SortOrder
  tagIDs: SortOrder
  title: SortOrder
}

input PostOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  comments: CommentOrderByRelationAggregateInput
  id: SortOrder
  likeIDs: SortOrder
  likes: UserOrderByRelationAggregateInput
  message: SortOrder
  tagIDs: SortOrder
  tags: TagOrderByRelationAggregateInput
  title: SortOrder
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

enum PostScalarFieldEnum {
  authorId
  id
  likeIDs
  message
  tagIDs
  title
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  authorId: StringFilter
  id: StringFilter
  likeIDs: StringNullableListFilter
  message: StringNullableFilter
  tagIDs: StringNullableListFilter
  title: StringFilter
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput!]
  NOT: [PostScalarWhereWithAggregatesInput!]
  OR: [PostScalarWhereWithAggregatesInput!]
  authorId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  likeIDs: StringNullableListFilter
  message: StringNullableWithAggregatesFilter
  tagIDs: StringNullableListFilter
  title: StringWithAggregatesFilter
}

input PostUpdateInput {
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  comments: CommentUpdateManyWithoutPortNestedInput
  likeIDs: PostUpdatelikeIDsInput
  likes: UserUpdateManyWithoutLikePostsNestedInput
  message: NullableStringFieldUpdateOperationsInput
  tagIDs: PostUpdatetagIDsInput
  tags: TagUpdateManyWithoutPostsNestedInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  likeIDs: PostUpdatelikeIDsInput
  message: NullableStringFieldUpdateOperationsInput
  tagIDs: PostUpdatetagIDsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithWhereWithoutLikesInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithWhereWithoutTagsInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutAuthorNestedInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithoutLikesNestedInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutLikesInput!]
  create: [PostCreateWithoutLikesInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutLikesInput!]
  updateMany: [PostUpdateManyWithWhereWithoutLikesInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutLikesInput!]
}

input PostUpdateManyWithoutTagsNestedInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutTagsInput!]
  create: [PostCreateWithoutTagsInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [PostUpdateManyWithWhereWithoutTagsInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutTagsInput!]
}

input PostUpdateOneRequiredWithoutCommentsNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutLikesInput {
  data: PostUpdateWithoutLikesInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithWhereUniqueWithoutTagsInput {
  data: PostUpdateWithoutTagsInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutAuthorInput {
  comments: CommentUpdateManyWithoutPortNestedInput
  likeIDs: PostUpdatelikeIDsInput
  likes: UserUpdateManyWithoutLikePostsNestedInput
  message: NullableStringFieldUpdateOperationsInput
  tagIDs: PostUpdatetagIDsInput
  tags: TagUpdateManyWithoutPostsNestedInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateWithoutCommentsInput {
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  likeIDs: PostUpdatelikeIDsInput
  likes: UserUpdateManyWithoutLikePostsNestedInput
  message: NullableStringFieldUpdateOperationsInput
  tagIDs: PostUpdatetagIDsInput
  tags: TagUpdateManyWithoutPostsNestedInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateWithoutLikesInput {
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  comments: CommentUpdateManyWithoutPortNestedInput
  likeIDs: PostUpdatelikeIDsInput
  message: NullableStringFieldUpdateOperationsInput
  tagIDs: PostUpdatetagIDsInput
  tags: TagUpdateManyWithoutPostsNestedInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateWithoutTagsInput {
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  comments: CommentUpdateManyWithoutPortNestedInput
  likeIDs: PostUpdatelikeIDsInput
  likes: UserUpdateManyWithoutLikePostsNestedInput
  message: NullableStringFieldUpdateOperationsInput
  tagIDs: PostUpdatetagIDsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdatelikeIDsInput {
  push: [String!]
  set: [String!]
}

input PostUpdatetagIDsInput {
  push: [String!]
  set: [String!]
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutLikesInput {
  create: PostCreateWithoutLikesInput!
  update: PostUpdateWithoutLikesInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutTagsInput {
  create: PostCreateWithoutTagsInput!
  update: PostUpdateWithoutTagsInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  update: PostUpdateWithoutCommentsInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserRelationFilter
  authorId: StringFilter
  comments: CommentListRelationFilter
  id: StringFilter
  likeIDs: StringNullableListFilter
  likes: UserListRelationFilter
  message: StringNullableFilter
  tagIDs: StringNullableListFilter
  tags: TagListRelationFilter
  title: StringFilter
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  aggregateComment(cursor: CommentWhereUniqueInput, orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): AggregateComment!
  aggregatePost(cursor: PostWhereUniqueInput, orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): AggregatePost!
  aggregateTag(cursor: TagWhereUniqueInput, orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): AggregateTag!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  findFirstComment(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstCommentOrThrow(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstPostOrThrow(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstTag(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): Tag
  findFirstTagOrThrow(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): Tag
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  getComment(where: CommentWhereUniqueInput!): Comment
  getPost(where: PostWhereUniqueInput!): Post
  getTag(where: TagWhereUniqueInput!): Tag
  getUser(where: UserWhereUniqueInput!): User
  groupByComment(by: [CommentScalarFieldEnum!]!, having: CommentScalarWhereWithAggregatesInput, orderBy: [CommentOrderByWithAggregationInput!], skip: Int, take: Int, where: CommentWhereInput): [CommentGroupBy!]!
  groupByPost(by: [PostScalarFieldEnum!]!, having: PostScalarWhereWithAggregatesInput, orderBy: [PostOrderByWithAggregationInput!], skip: Int, take: Int, where: PostWhereInput): [PostGroupBy!]!
  groupByTag(by: [TagScalarFieldEnum!]!, having: TagScalarWhereWithAggregatesInput, orderBy: [TagOrderByWithAggregationInput!], skip: Int, take: Int, where: TagWhereInput): [TagGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  post(where: PostWhereUniqueInput!): Post
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  tag(where: TagWhereUniqueInput!): Tag
  tags(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
  test: Test!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  name: String
  password: String!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Tag {
  _count: TagCount
  id: String!
  name: String!
  postIDs: [String!]!
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
}

type TagCount {
  posts: Int!
}

type TagCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
  postIDs: Int!
}

input TagCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  postIDs: SortOrder
}

input TagCreateInput {
  id: String
  name: String!
  postIDs: TagCreatepostIDsInput
  posts: PostCreateNestedManyWithoutTagsInput
}

input TagCreateManyInput {
  id: String
  name: String!
  postIDs: TagCreatepostIDsInput
}

input TagCreateNestedManyWithoutPostsInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutPostsInput!]
  create: [TagCreateWithoutPostsInput!]
}

input TagCreateOrConnectWithoutPostsInput {
  create: TagCreateWithoutPostsInput!
  where: TagWhereUniqueInput!
}

input TagCreateWithoutPostsInput {
  id: String
  name: String!
  postIDs: TagCreatepostIDsInput
}

input TagCreatepostIDsInput {
  set: [String!]!
}

type TagGroupBy {
  _count: TagCountAggregate
  _max: TagMaxAggregate
  _min: TagMinAggregate
  id: String!
  name: String!
  postIDs: [String!]
}

input TagListRelationFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

type TagMaxAggregate {
  id: String
  name: String
}

input TagMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type TagMinAggregate {
  id: String
  name: String
}

input TagMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input TagOrderByRelationAggregateInput {
  _count: SortOrder
}

input TagOrderByWithAggregationInput {
  _count: TagCountOrderByAggregateInput
  _max: TagMaxOrderByAggregateInput
  _min: TagMinOrderByAggregateInput
  id: SortOrder
  name: SortOrder
  postIDs: SortOrder
}

input TagOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  postIDs: SortOrder
  posts: PostOrderByRelationAggregateInput
}

enum TagScalarFieldEnum {
  id
  name
  postIDs
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  postIDs: StringNullableListFilter
}

input TagScalarWhereWithAggregatesInput {
  AND: [TagScalarWhereWithAggregatesInput!]
  NOT: [TagScalarWhereWithAggregatesInput!]
  OR: [TagScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  postIDs: StringNullableListFilter
}

input TagUpdateInput {
  name: StringFieldUpdateOperationsInput
  postIDs: TagUpdatepostIDsInput
  posts: PostUpdateManyWithoutTagsNestedInput
}

input TagUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  postIDs: TagUpdatepostIDsInput
}

input TagUpdateManyWithWhereWithoutPostsInput {
  data: TagUpdateManyMutationInput!
  where: TagScalarWhereInput!
}

input TagUpdateManyWithoutPostsNestedInput {
  connect: [TagWhereUniqueInput!]
  connectOrCreate: [TagCreateOrConnectWithoutPostsInput!]
  create: [TagCreateWithoutPostsInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutPostsInput!]
  updateMany: [TagUpdateManyWithWhereWithoutPostsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutPostsInput!]
}

input TagUpdateWithWhereUniqueWithoutPostsInput {
  data: TagUpdateWithoutPostsInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithoutPostsInput {
  name: StringFieldUpdateOperationsInput
  postIDs: TagUpdatepostIDsInput
}

input TagUpdatepostIDsInput {
  push: [String!]
  set: [String!]
}

input TagUpsertWithWhereUniqueWithoutPostsInput {
  create: TagCreateWithoutPostsInput!
  update: TagUpdateWithoutPostsInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  id: StringFilter
  name: StringFilter
  postIDs: StringNullableListFilter
  posts: PostListRelationFilter
}

input TagWhereUniqueInput {
  id: String
}

type Test {
  """Database id"""
  id: ID!

  """User's real world name"""
  name: String!
}

type User {
  _count: UserCount
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  email: String!
  followerIDs: [String!]!
  followers(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  following(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  followingIDs: [String!]!
  id: String!
  likePostIDs: [String!]!
  likePosts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  name: String
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
}

type UserCount {
  comments: Int!
  followers: Int!
  following: Int!
  likePosts: Int!
  posts: Int!
}

type UserCountAggregate {
  _all: Int!
  email: Int!
  followerIDs: Int!
  followingIDs: Int!
  id: Int!
  likePostIDs: Int!
  name: Int!
  password: Int!
  roles: Int!
}

input UserCountOrderByAggregateInput {
  email: SortOrder
  followerIDs: SortOrder
  followingIDs: SortOrder
  id: SortOrder
  likePostIDs: SortOrder
  name: SortOrder
  password: SortOrder
  roles: SortOrder
}

input UserCreateInput {
  comments: CommentCreateNestedManyWithoutAuthorInput
  email: String!
  followerIDs: UserCreatefollowerIDsInput
  followers: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowersInput
  followingIDs: UserCreatefollowingIDsInput
  id: String
  likePostIDs: UserCreatelikePostIDsInput
  likePosts: PostCreateNestedManyWithoutLikesInput
  name: String
  password: String
  posts: PostCreateNestedManyWithoutAuthorInput
  roles: UserCreaterolesInput
}

input UserCreateManyInput {
  email: String!
  followerIDs: UserCreatefollowerIDsInput
  followingIDs: UserCreatefollowingIDsInput
  id: String
  likePostIDs: UserCreatelikePostIDsInput
  name: String
  password: String
  roles: UserCreaterolesInput
}

input UserCreateNestedManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowersInput!]
  create: [UserCreateWithoutFollowersInput!]
}

input UserCreateNestedManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowingInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateNestedManyWithoutLikePostsInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutLikePostsInput!]
  create: [UserCreateWithoutLikePostsInput!]
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOrConnectWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutLikePostsInput {
  create: UserCreateWithoutLikePostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCommentsInput {
  email: String!
  followerIDs: UserCreatefollowerIDsInput
  followers: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowersInput
  followingIDs: UserCreatefollowingIDsInput
  id: String
  likePostIDs: UserCreatelikePostIDsInput
  likePosts: PostCreateNestedManyWithoutLikesInput
  name: String
  password: String
  posts: PostCreateNestedManyWithoutAuthorInput
  roles: UserCreaterolesInput
}

input UserCreateWithoutFollowersInput {
  comments: CommentCreateNestedManyWithoutAuthorInput
  email: String!
  followerIDs: UserCreatefollowerIDsInput
  following: UserCreateNestedManyWithoutFollowersInput
  followingIDs: UserCreatefollowingIDsInput
  id: String
  likePostIDs: UserCreatelikePostIDsInput
  likePosts: PostCreateNestedManyWithoutLikesInput
  name: String
  password: String
  posts: PostCreateNestedManyWithoutAuthorInput
  roles: UserCreaterolesInput
}

input UserCreateWithoutFollowingInput {
  comments: CommentCreateNestedManyWithoutAuthorInput
  email: String!
  followerIDs: UserCreatefollowerIDsInput
  followers: UserCreateNestedManyWithoutFollowingInput
  followingIDs: UserCreatefollowingIDsInput
  id: String
  likePostIDs: UserCreatelikePostIDsInput
  likePosts: PostCreateNestedManyWithoutLikesInput
  name: String
  password: String
  posts: PostCreateNestedManyWithoutAuthorInput
  roles: UserCreaterolesInput
}

input UserCreateWithoutLikePostsInput {
  comments: CommentCreateNestedManyWithoutAuthorInput
  email: String!
  followerIDs: UserCreatefollowerIDsInput
  followers: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowersInput
  followingIDs: UserCreatefollowingIDsInput
  id: String
  likePostIDs: UserCreatelikePostIDsInput
  name: String
  password: String
  posts: PostCreateNestedManyWithoutAuthorInput
  roles: UserCreaterolesInput
}

input UserCreateWithoutPostsInput {
  comments: CommentCreateNestedManyWithoutAuthorInput
  email: String!
  followerIDs: UserCreatefollowerIDsInput
  followers: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowersInput
  followingIDs: UserCreatefollowingIDsInput
  id: String
  likePostIDs: UserCreatelikePostIDsInput
  likePosts: PostCreateNestedManyWithoutLikesInput
  name: String
  password: String
  roles: UserCreaterolesInput
}

input UserCreatefollowerIDsInput {
  set: [String!]!
}

input UserCreatefollowingIDsInput {
  set: [String!]!
}

input UserCreatelikePostIDsInput {
  set: [String!]!
}

input UserCreaterolesInput {
  set: [String!]!
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  email: String!
  followerIDs: [String!]
  followingIDs: [String!]
  id: String!
  likePostIDs: [String!]
  name: String
  password: String
  roles: [String!]
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserMaxAggregate {
  email: String
  id: String
  name: String
  password: String
}

input UserMaxOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

type UserMinAggregate {
  email: String
  id: String
  name: String
  password: String
}

input UserMinOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  email: SortOrder
  followerIDs: SortOrder
  followingIDs: SortOrder
  id: SortOrder
  likePostIDs: SortOrder
  name: SortOrder
  password: SortOrder
  roles: SortOrder
}

input UserOrderByWithRelationInput {
  comments: CommentOrderByRelationAggregateInput
  email: SortOrder
  followerIDs: SortOrder
  followers: UserOrderByRelationAggregateInput
  following: UserOrderByRelationAggregateInput
  followingIDs: SortOrder
  id: SortOrder
  likePostIDs: SortOrder
  likePosts: PostOrderByRelationAggregateInput
  name: SortOrder
  password: SortOrder
  posts: PostOrderByRelationAggregateInput
  roles: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  email
  followerIDs
  followingIDs
  id
  likePostIDs
  name
  password
  roles
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  email: StringFilter
  followerIDs: StringNullableListFilter
  followingIDs: StringNullableListFilter
  id: StringFilter
  likePostIDs: StringNullableListFilter
  name: StringNullableFilter
  password: StringNullableFilter
  roles: StringNullableListFilter
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  email: StringWithAggregatesFilter
  followerIDs: StringNullableListFilter
  followingIDs: StringNullableListFilter
  id: StringWithAggregatesFilter
  likePostIDs: StringNullableListFilter
  name: StringNullableWithAggregatesFilter
  password: StringNullableWithAggregatesFilter
  roles: StringNullableListFilter
}

input UserUpdateInput {
  comments: CommentUpdateManyWithoutAuthorNestedInput
  email: StringFieldUpdateOperationsInput
  followerIDs: UserUpdatefollowerIDsInput
  followers: UserUpdateManyWithoutFollowingNestedInput
  following: UserUpdateManyWithoutFollowersNestedInput
  followingIDs: UserUpdatefollowingIDsInput
  likePostIDs: UserUpdatelikePostIDsInput
  likePosts: PostUpdateManyWithoutLikesNestedInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  roles: UserUpdaterolesInput
}

input UserUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  followerIDs: UserUpdatefollowerIDsInput
  followingIDs: UserUpdatefollowingIDsInput
  likePostIDs: UserUpdatelikePostIDsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  roles: UserUpdaterolesInput
}

input UserUpdateManyWithWhereWithoutFollowersInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithWhereWithoutFollowingInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithWhereWithoutLikePostsInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithoutFollowersNestedInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowersInput!]
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  updateMany: [UserUpdateManyWithWhereWithoutFollowersInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
}

input UserUpdateManyWithoutFollowingNestedInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowingInput!]
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  updateMany: [UserUpdateManyWithWhereWithoutFollowingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
}

input UserUpdateManyWithoutLikePostsNestedInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutLikePostsInput!]
  create: [UserCreateWithoutLikePostsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutLikePostsInput!]
  updateMany: [UserUpdateManyWithWhereWithoutLikePostsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutLikePostsInput!]
}

input UserUpdateOneRequiredWithoutCommentsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutPostsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  data: UserUpdateWithoutFollowersInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  data: UserUpdateWithoutFollowingInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutLikePostsInput {
  data: UserUpdateWithoutLikePostsInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithoutCommentsInput {
  email: StringFieldUpdateOperationsInput
  followerIDs: UserUpdatefollowerIDsInput
  followers: UserUpdateManyWithoutFollowingNestedInput
  following: UserUpdateManyWithoutFollowersNestedInput
  followingIDs: UserUpdatefollowingIDsInput
  likePostIDs: UserUpdatelikePostIDsInput
  likePosts: PostUpdateManyWithoutLikesNestedInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  roles: UserUpdaterolesInput
}

input UserUpdateWithoutFollowersInput {
  comments: CommentUpdateManyWithoutAuthorNestedInput
  email: StringFieldUpdateOperationsInput
  followerIDs: UserUpdatefollowerIDsInput
  following: UserUpdateManyWithoutFollowersNestedInput
  followingIDs: UserUpdatefollowingIDsInput
  likePostIDs: UserUpdatelikePostIDsInput
  likePosts: PostUpdateManyWithoutLikesNestedInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  roles: UserUpdaterolesInput
}

input UserUpdateWithoutFollowingInput {
  comments: CommentUpdateManyWithoutAuthorNestedInput
  email: StringFieldUpdateOperationsInput
  followerIDs: UserUpdatefollowerIDsInput
  followers: UserUpdateManyWithoutFollowingNestedInput
  followingIDs: UserUpdatefollowingIDsInput
  likePostIDs: UserUpdatelikePostIDsInput
  likePosts: PostUpdateManyWithoutLikesNestedInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  roles: UserUpdaterolesInput
}

input UserUpdateWithoutLikePostsInput {
  comments: CommentUpdateManyWithoutAuthorNestedInput
  email: StringFieldUpdateOperationsInput
  followerIDs: UserUpdatefollowerIDsInput
  followers: UserUpdateManyWithoutFollowingNestedInput
  following: UserUpdateManyWithoutFollowersNestedInput
  followingIDs: UserUpdatefollowingIDsInput
  likePostIDs: UserUpdatelikePostIDsInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  roles: UserUpdaterolesInput
}

input UserUpdateWithoutPostsInput {
  comments: CommentUpdateManyWithoutAuthorNestedInput
  email: StringFieldUpdateOperationsInput
  followerIDs: UserUpdatefollowerIDsInput
  followers: UserUpdateManyWithoutFollowingNestedInput
  following: UserUpdateManyWithoutFollowersNestedInput
  followingIDs: UserUpdatefollowingIDsInput
  likePostIDs: UserUpdatelikePostIDsInput
  likePosts: PostUpdateManyWithoutLikesNestedInput
  name: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  roles: UserUpdaterolesInput
}

input UserUpdatefollowerIDsInput {
  push: [String!]
  set: [String!]
}

input UserUpdatefollowingIDsInput {
  push: [String!]
  set: [String!]
}

input UserUpdatelikePostIDsInput {
  push: [String!]
  set: [String!]
}

input UserUpdaterolesInput {
  push: [String!]
  set: [String!]
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput!
  update: UserUpdateWithoutFollowersInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  update: UserUpdateWithoutFollowingInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutLikePostsInput {
  create: UserCreateWithoutLikePostsInput!
  update: UserUpdateWithoutLikePostsInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  comments: CommentListRelationFilter
  email: StringFilter
  followerIDs: StringNullableListFilter
  followers: UserListRelationFilter
  following: UserListRelationFilter
  followingIDs: StringNullableListFilter
  id: StringFilter
  likePostIDs: StringNullableListFilter
  likePosts: PostListRelationFilter
  name: StringNullableFilter
  password: StringNullableFilter
  posts: PostListRelationFilter
  roles: StringNullableListFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}