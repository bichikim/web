/**
 * @vitest-environment happy-dom
 */
import {onKeyboard} from '../keyboard'
import {describe, expect, it, vi} from 'vitest'
describe('onKeyboard', () => {
  it('should call callback when key is pressed', () => {
    const callback = vi.fn()
    onKeyboard('a', callback)
    expect(callback).toHaveBeenCalledTimes(0)
    window.dispatchEvent(new KeyboardEvent('keydown', {key: 'a'}))
    expect(callback).toHaveBeenCalledTimes(1)
    expect(callback).toHaveBeenNthCalledWith(1, true)
    window.dispatchEvent(new KeyboardEvent('keyup', {key: 'a'}))
    expect(callback).toHaveBeenCalledTimes(2)
    expect(callback).toHaveBeenNthCalledWith(2, false)
  })
  it('should prevent call callback repeatedly when key is pressed', () => {
    const callback = vi.fn()
    onKeyboard('a', callback)
    expect(callback).toHaveBeenCalledTimes(0)
    window.dispatchEvent(new KeyboardEvent('keydown', {key: 'a'}))
    window.dispatchEvent(new KeyboardEvent('keydown', {key: 'a'}))
    window.dispatchEvent(new KeyboardEvent('keydown', {key: 'a'}))
    window.dispatchEvent(new KeyboardEvent('keydown', {key: 'a'}))
    window.dispatchEvent(new KeyboardEvent('keydown', {key: 'a'}))
    window.dispatchEvent(new KeyboardEvent('keydown', {key: 'a'}))
    expect(callback).toHaveBeenCalledTimes(1)
    expect(callback).toHaveBeenNthCalledWith(1, true)
    window.dispatchEvent(new KeyboardEvent('keyup', {key: 'a'}))
    expect(callback).toHaveBeenCalledTimes(2)
    expect(callback).toHaveBeenNthCalledWith(2, false)
  })
  it('should not prevent call callback repeatedly when key is pressed', () => {
    const callback = vi.fn()
    onKeyboard('a', callback, true)
    expect(callback).toHaveBeenCalledTimes(0)
    window.dispatchEvent(new KeyboardEvent('keydown', {key: 'a'}))
    window.dispatchEvent(new KeyboardEvent('keydown', {key: 'a'}))
    window.dispatchEvent(new KeyboardEvent('keydown', {key: 'a'}))
    window.dispatchEvent(new KeyboardEvent('keydown', {key: 'a'}))
    window.dispatchEvent(new KeyboardEvent('keydown', {key: 'a'}))
    window.dispatchEvent(new KeyboardEvent('keydown', {key: 'a'}))
    expect(callback).toHaveBeenCalledTimes(6)
    expect(callback).toHaveBeenNthCalledWith(1, true)
    window.dispatchEvent(new KeyboardEvent('keyup', {key: 'a'}))
    expect(callback).toHaveBeenCalledTimes(7)
    expect(callback).toHaveBeenNthCalledWith(7, false)
  })
})
