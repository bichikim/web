name: Build and Deploy
on:
  push:
    branches:
      - master
      - dev
env:
  PNPM_VERSION: 6.23.2
  NODE_VERSION: 16
jobs:
  # Build Library
  build-library:
    name: Build libraries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-    

      - name: Prepare Pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Use Libraies Cache
        uses: actions/cache@v2
        id: libraies-cache
        with:
          path: 'packages/*/lib'
          key: ${{ runner.os }}-libraies-${{ hashFiles('packages/**/*.ts') }}

      - name: Install Dependencies
        #if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: pnpm install --ignore-scripts

      - name: Build Libraies
        if: steps.libraies-cache.outputs.cache-hit != 'true'
        run: pnpm run build:libraries
  # Test Job
  test:
    name: Test
    needs: build-library
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-    

      - name: Prepare Pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Use Libraies Cache
        uses: actions/cache@v2
        id: libraies-cache
        with:
          path: 'packages/*/lib'
          key: ${{ runner.os }}-libraies-${{ hashFiles('packages/**/*.ts') }}

      - name: Install Dependencies
        #if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: pnpm install --ignore-scripts

      - name: Build Libraies
        if: steps.libraies-cache.outputs.cache-hit != 'true'
        run: pnpm run build:libraries

      - name: Test
        run: pnpm run test

  # Build Client
  build-client:
    name: Build Client
    needs: test
    runs-on: ubuntu-latest
    outputs:
      run_job: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-    

      - name: Prepare Pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Use Libraies Cache
        uses: actions/cache@v2
        id: libraies-cache
        with:
          path: 'packages/*/lib'
          key: ${{ runner.os }}-libraies-${{ hashFiles('packages/**/*.ts') }}

      - name: Install Dependencies
        #if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: pnpm install --ignore-scripts

      - name: Build Libraies
        if: steps.libraies-cache.outputs.cache-hit != 'true'
        run: pnpm run build:libraies

      - name: Build
        run: pnpm run build:@coong/client

      - name: Archive Production Artifact
        uses: actions/upload-artifact@master
        with:
          name: dist-client
          path: |
            coong/client/dist

      - name: Changed files
        uses: tj-actions/changed-files@v9
        id: changed-files
        with:
          files: |
            coong/client
  build-server:
    name: Build Server
    needs: test
    outputs:
      run_job: ${{ steps.changed-files.outputs.any_changed }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-    

      - name: Prepare Pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Dependencies
        #if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: pnpm install

      - name: Use Libraies Cache
        uses: actions/cache@v2
        id: libraies-cache
        with:
          path: 'packages/*/lib'
          key: ${{ runner.os }}-libraies-${{ hashFiles('packages/**/*.ts') }}

      - name: Build Libraies
        if: steps.libraies-cache.outputs.cache-hit != 'true'
        run: pnpm run build:libraries
      - name: Build Server
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: pnpm run build:@coong/server

      - name: Archive Production Artifact
        uses: actions/upload-artifact@master
        with:
          name: dist-server
          path: |
            coong/server/dist

      - name: Changed files
        uses: tj-actions/changed-files@v9
        id: changed-files
        with:
          files: |
            coong/server
  deploy-server:
    name: Deploy Server
    needs: build-server
    runs-on: ubuntu-latest
    # only master
    if: ${{ github.ref == 'refs/heads/master' && needs.build-server.outputs.run_job == 'true' }}
    env:
      GCP_SERVICE_NAME: coong-back-end
      GCP_IAMGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/coong-back-end
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master

      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: dist-server
          path: coong/server/dist

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker
        run: |
          gcloud auth configure-docker

      - name: Create Env File
        run: |
          touch coong/server/.env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> coong/server/.env

      - name: Build
        run: |
          docker build \
          -t $GCP_IAMGE_NAME:$GITHUB_SHA \
          ./coong/server

      - name: Tag
        run: |
          docker tag \
          $GCP_IAMGE_NAME:$GITHUB_SHA \
          $GCP_IAMGE_NAME:latest
      - name: Push
        run: |
          docker push $GCP_IAMGE_NAME:$GITHUB_SHA

      - name: Deploy
        run: |
          gcloud run deploy $GCP_SERVICE_NAME --image $GCP_IAMGE_NAME:$GITHUB_SHA \
          --quiet \
          --platform managed \
          --set-env-vars NODE_ENV=production \
          --region asia-northeast3 \
          --allow-unauthenticated \
          --max-instances 10 \
          --port 8080 \
          --memory 512M
  deploy-dev-server:
    name: Deploy Dev Server
    needs: build-server
    runs-on: ubuntu-latest
    # only dev
    if: ${{ github.ref == 'refs/heads/dev' && needs.build-server.outputs.run_job == 'true' }}
    env:
      GCP_SERVICE_NAME: coong-back-end-dev
      GCP_IAMGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/coong-back-end-dev
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master

      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: dist-server
          path: coong/server/dist

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker
        run: |
          gcloud auth configure-docker

      - name: Create Env File
        run: |
          touch coong/server/.env
          echo DATABASE_URL=${{ secrets.DATABASE_URL_DEV }} >> coong/server/.env

      - name: Build
        run: |
          docker build \
          -t $GCP_IAMGE_NAME:$GITHUB_SHA \
          ./coong/server

      - name: Tag
        run: |
          docker tag \
          $GCP_IAMGE_NAME:$GITHUB_SHA \
          $GCP_IAMGE_NAME:latest

      - name: Push
        run: |
          docker push $GCP_IAMGE_NAME:$GITHUB_SHA

      - name: Deploy
        run: |
          gcloud run deploy $GCP_SERVICE_NAME --image $GCP_IAMGE_NAME:$GITHUB_SHA \
          --quiet \
          --platform managed \
          --region asia-northeast3 \
          --allow-unauthenticated \
          --max-instances 2 \
          --port 8080 \
          --memory 512M
  deploy-client:
    name: Deploy Client
    needs: build-client
    runs-on: ubuntu-latest
    # only master
    if: ${{ github.ref == 'refs/heads/master' && needs.build-client.outputs.run_job == 'true' }}
    env:
      GCP_SERVICE_NAME: coong
      GCP_IAMGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/coong
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master

      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: dist-client
          path: coong/client/dist

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker
        run: |
          gcloud auth configure-docker     

      - name: Create Env File
        run: |
          touch server/.env 

      - name: Build
        run: |
          docker build \
          -t $GCP_IAMGE_NAME:$GITHUB_SHA \    
          ./coong/client

      - name: Tag
        run: |
          docker tag \
          $GCP_IAMGE_NAME:$GITHUB_SHA \
          $GCP_IAMGE_NAME:latest    

      - name: Push
        run: |
          docker push $GCP_IAMGE_NAME:$GITHUB_SHA   

      - name: Deploy
        run: |
          gcloud run deploy $GCP_SERVICE_NAME --image $GCP_IAMGE_NAME:$GITHUB_SHA \
          --quiet \
          --platform managed \
          --region asia-northeast3 \
          --allow-unauthenticated \
          --max-instances 2 \
          --port 8080 \
          --memory 512M
