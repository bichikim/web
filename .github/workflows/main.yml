name: Build and Deploy
on:
  push:
    branches:
      - master
      - dev
env:
  PNPM_VERSION: 6.23.2
jobs:
  build-libray:
    name: Build libraries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Prepare Pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Yarn Version
        run: yarn -v
      - name: Use Yarn Cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Use Libraies Cache
        uses: actions/cache@v2
        id: libraies-cache
        with:
          path: 'packages/*/lib'
          key: ${{ runner.os }}-libraies-${{ hashFiles('packages/**/*.ts') }}
      - name: Install Dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Build Libraies
        if: steps.libraies-cache.outputs.cache-hit != 'true'
        run: yarn run build:libraries
  test:
    name: Test
    needs: build-libray
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Prepare Pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.7.6
      - name: Use Yarn Cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Use Libraies Cache
        uses: actions/cache@v2
        id: libraies-cache
        with:
          path: 'packages/*/lib'
          key: ${{ runner.os }}-libraies-${{ hashFiles('packages/**/*.ts') }}
      - name: Install Dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Build Libraies
        if: steps.libraies-cache.outputs.cache-hit != 'true'
        run: yarn run build:libraries
      - name: Test
        run: yarn run test
  build-client:
    name: Build Client
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Prepare Pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.7.6
      - name: Use Yarn Cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Use Libraies Cache
        uses: actions/cache@v2
        id: libraies-cache
        with:
          path: 'packages/*/lib'
          key: ${{ runner.os }}-libraies-${{ hashFiles('packages/**/*.ts') }}
      - name: Install Dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Build Libraies
        if: steps.libraies-cache.outputs.cache-hit != 'true'
        run: yarn run build:libraies
      - name: Build
        run: yarn run build:@coong/client
      - name: Archive Production Artifact
        uses: actions/upload-artifact@master
        with:
          name: dist-client
          path: |
            coong/client/dist
  build-server:
    name: Build Server
    needs: test
    outputs:
      run_job: ${{ steps.changed-files.outputs.any_changed }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
        with:
          fetch-depth: 0
      - name: Use Yarn Cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Use Libraies Cache
        uses: actions/cache@v2
        id: libraies-cache
        with:
          path: 'packages/*/lib'
          key: ${{ runner.os }}-libraies-${{ hashFiles('packages/**/*.ts') }}
      - name: Install Dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install
      - name: Build Libraies
        if: steps.libraies-cache.outputs.cache-hit != 'true'
        run: yarn run build:libraies
      - name: Build Server
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: yarn run build:server
      - name: Archive Production Artifact
        uses: actions/upload-artifact@master
        with:
          name: dist-server
          path: |
            coong/server/lib
      - name: Changed files
        uses: tj-actions/changed-files@v9
        id: changed-files
        with:
          files: |
            coong/server
  deploy-server:
    name: Deploy Server
    needs: build-server
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' && needs.build-server.outputs.run_job == 'true' }}
    env:
      GCP_SERVICE_NAME: coong-back-end
      GCP_IAMGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/coong-back-end
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: dist-server
          path: coong/server/lib
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - name: Configure Docker
        run: |
          gcloud auth configure-docker
      - name: Create Env File
        run: |
          touch coong/server/.env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> coong/server/.env
      - name: Build
        run: |
          docker build \
          -f server.Dockerfile \
          -t $GCP_IAMGE_NAME:$GITHUB_SHA \
          .
      - name: Tag
        run: |
          docker tag \
          $GCP_IAMGE_NAME:$GITHUB_SHA \
          $GCP_IAMGE_NAME:latest
      - name: Push
        run: |
          docker push $GCP_IAMGE_NAME:$GITHUB_SHA
      - name: Deploy
        run: |
          gcloud run deploy $GCP_SERVICE_NAME --image $GCP_IAMGE_NAME:$GITHUB_SHA \
          --quiet \
          --platform managed \
          --set-env-vars NODE_ENV=production \
          --region asia-northeast3 \
          --allow-unauthenticated \
          --max-instances 10 \
          --port 8080 \
          --memory 512M
  deploy-dev-server:
    name: Deploy Dev Server
    needs: build-server
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/dev' && needs.build-server.outputs.run_job == 'true' }}
    env:
      GCP_SERVICE_NAME: coong-back-end-dev
      GCP_IAMGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/coong-back-end-dev
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: dist-server
          path: server/lib
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - name: Configure Docker
        run: |
          gcloud auth configure-docker
      - name: Create Env File
        run: |
          touch server/.env
          echo DATABASE_URL=${{ secrets.DATABASE_URL_DEV }} >> server/.env
      - name: Build
        run: |
          docker build \
          -f server.Dockerfile \
          -t $GCP_IAMGE_NAME:$GITHUB_SHA \
          .
      - name: Tag
        run: |
          docker tag \
          $GCP_IAMGE_NAME:$GITHUB_SHA \
          $GCP_IAMGE_NAME:latest
      - name: Push
        run: |
          docker push $GCP_IAMGE_NAME:$GITHUB_SHA
      - name: Deploy
        run: |
          gcloud run deploy $GCP_SERVICE_NAME --image $GCP_IAMGE_NAME:$GITHUB_SHA \
          --quiet \
          --platform managed \
          --region asia-northeast3 \
          --allow-unauthenticated \
          --max-instances 2 \
          --port 8080 \
          --memory 512M
  deploy-client:
    name: Deploy Client
    needs: build-client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: dist-client
          path: dist
#  deploy:
#    name: Deploy
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Repo
#        uses: actions/checkout@master
#      - name: Download Artifact
#        uses: actions/download-artifact@master
#        with:
#          name: dist
#          path: packages
#      - name: Deploy to Firebase
#        uses: w9jds/firebase-action@master
#        with:
#          args: deploy --only hosting
#        env:
#          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
